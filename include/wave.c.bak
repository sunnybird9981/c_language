#include <string.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include "wave.h"


// ChunkID 定義
const char ID_RIFF[4] = "RIFF";
const char ID_WAVE[4] = "WAVE";
const char ID_FMT[4] = "fmt";
const char ID_DATA[4] = "data";

CHUNK Chunk = {0};


// this function set pointer to the start of the chunk.
void wave_setPointer(FILE *fp, char *chunkID) {
	while(fread(Chunk.ID, 1, 4, fp)) {
		// if the is not the start of the target, moves reading point to the next chunk.
		if(strncmp(Chunk.ID, chunkID, 4) != 0) {
			fread(&Chunk.size, 4, 1, fp);
			fseek(fp, Chunk.size, SEEK_CUR);
		// if the is the start of the target, finish this function.
		} else {
			break;
		}
	}
}


// モノラルの音声データ(waveファイル)の読み込み
void monoWaveRead(MONO_PCM *pcm, char *fileName) {
	FILE *fp;
	int i, chunkSize;
	char chunkID[5] = {};
	WAVE_FORMAT waveFormat;

	fp = fopen(fileName, "rb");

	if(!fp) {
		printf("file open error\n");
		exit(1);
	}

	// RIFFチャンクの読み込み
	fread(waveFormat.riffChunk.chunkID, 1, 4, fp);
	fread(&waveFormat.riffChunk.chunkSize, 4, 1, fp);
	fread(waveFormat.riffChunk.chunkFormType, 1, 4, fp);

	// fmtチャンクの読み込み
	fread(waveFormat.fmtChunk.chunkID, 1, 4, fp);
	fread(&waveFormat.fmtChunk.chunkSize, 4, 1, fp);
	fread(&waveFormat.fmtChunk.waveFormatType, 2, 1, fp);
	fread(&waveFormat.fmtChunk.formatChannel, 2, 1, fp);
	fread(&waveFormat.fmtChunk.samplesPerSec, 4, 1, fp);
	fread(&waveFormat.fmtChunk.bytesPerSec, 4, 1, fp);
	fread(&waveFormat.fmtChunk.blockSize, 2, 1, fp);
	fread(&waveFormat.fmtChunk.bitsPerSample, 2, 1, fp);

	// dataチャンクを除く残りのチャンク読み込み
	fread(chunkID, 1, 4, fp);
	fread(&chunkSize, 4, 1, fp);

	while(strcmp(chunkID, "data")) {
		if(!strcmp(chunkID, "LIST")) {
			fseek(fp, chunkSize, SEEK_CUR);
		}
		if(!strcmp(chunkID, "")){
			break;
		}
		fread(chunkID, 1, 4, fp);
		fread(&chunkSize, 4, 1, fp);
	}

	// dataチャンクの読み込み
	for(i = 0; i < 4; i++) {
		waveFormat.dataChunk.chunkID[i] = chunkID[i];
	}
	waveFormat.dataChunk.chunkSize = chunkSize;

	pcm->fs = waveFormat.fmtChunk.samplesPerSec;
	pcm->bits = waveFormat.fmtChunk.bitsPerSample;
	pcm->length = waveFormat.dataChunk.chunkSize;
	pcm->s = calloc(pcm->length, sizeof(float));

	short data;
	for(i = 0; i < pcm->length; i++) {
		fread(&data, 2, 1, fp);
		pcm->s[i] = (float)data/GROUND;
	}

	fclose(fp);
}

// モノラルの音声データ(waveファイル)書き込み
void monoWaveWrite(MONO_PCM *pcm, char *fileName) {
	FILE *fp;
	int i;
	WAVE_FORMAT waveFormat;

	strcpy(waveFormat.riffChunk.chunkID, "RIFF");
	waveFormat.riffChunk.chunkSize = 36 + pcm->length;
	strcpy(waveFormat.riffChunk.chunkFormType, "WAVE");

	strcpy(waveFormat.fmtChunk.chunkID, "fmt ");
	waveFormat.fmtChunk.chunkSize = 16;
	// PCMの場合は1
	waveFormat.fmtChunk.waveFormatType = 1;
	// モノラルの場合は1,ステレオの場合は2
	waveFormat.fmtChunk.formatChannel = 1;
	waveFormat.fmtChunk.samplesPerSec = pcm->fs;
	waveFormat.fmtChunk.bytesPerSec = (pcm->fs * pcm->bits) / 8;
	waveFormat.fmtChunk.blockSize = pcm->bits / 8;
	waveFormat.fmtChunk.bitsPerSample = pcm->bits;

	strcpy(waveFormat.dataChunk.chunkID, "data");
	waveFormat.dataChunk.chunkSize = pcm->length;

	fp = fopen(fileName, "wb");

	if(!fp) {
		printf("file open error\n");
		exit(1);
	}

	// RIFFチャンクの書き込み
	fwrite(waveFormat.riffChunk.chunkID, 1, 4, fp);
	fwrite(&waveFormat.riffChunk.chunkSize, 4, 1, fp);
	fwrite(waveFormat.riffChunk.chunkFormType, 1, 4, fp);

	// fmtチャンクの書き込み
	fwrite(waveFormat.fmtChunk.chunkID, 1, 4, fp);
	fwrite(&waveFormat.fmtChunk.chunkSize, 4, 1, fp);
	fwrite(&waveFormat.fmtChunk.waveFormatType, 2, 1, fp);
	fwrite(&waveFormat.fmtChunk.formatChannel, 2, 1, fp);
	fwrite(&waveFormat.fmtChunk.samplesPerSec, 4, 1, fp);
	fwrite(&waveFormat.fmtChunk.bytesPerSec, 4, 1, fp);
	fwrite(&waveFormat.fmtChunk.blockSize, 2, 1, fp);
	fwrite(&waveFormat.fmtChunk.bitsPerSample, 2, 1, fp);

	//dataチャンクの書き込み
	fwrite(waveFormat.dataChunk.chunkID, 1, 4, fp);
	fwrite(&waveFormat.dataChunk.chunkSize, 4, 1, fp);

	short data;
	float s;
	for(i = 0; i < pcm->length; i++) {
		s = ((pcm->s[i] + 1.0) / 2) * (MAX - 1);
		if(s > MAX - 1)
			s = MAX - 1;
		else if(s < MIN)
			s = MIN;
		data = (short)(s + 0.5) - GROUND;

		//printf("%d\n", data);
		fwrite(&data, 2, 1, fp);
	}

	fclose(fp);
}


// read information of RIFF chunk
void wave_readRiffChunk(FILE *fp, WAVE_FORMAT *waveFormat, char *fileName) {
	// read RIFF chunk
	wave_setPointer(fp, "RIFF");
	strcpy(waveFormat->riffChunk.chunkID, "RIFF");
	fread(&waveFormat->riffChunk.chunkSize, 4, 1, fp);
	fread(waveFormat->riffChunk.chunkFormType, 1, 4, fp);
}


// read information of fmt chunk
void wave_readRiffChunk(FILE *fp, WAVE_FORMAT *waveFormat, char *fileName) {
	// read fmt chunk
	fseek(fp, 12, SEEK_SET);
	wave_setPointer(fp, "fmt ");
	strcpy(waveFormat->fmtChunk.chunkID, "fmt ");
	fread(&waveFormat->fmtChunk.chunkSize, 4, 1, fp);
	fread(&waveFormat->fmtChunk.waveFormatType, 2, 1, fp);
	fread(&waveFormat->fmtChunk.formatChannel, 2, 1, fp);
	fread(&waveFormat->fmtChunk.samplesPerSec, 4, 1, fp);
	fread(&waveFormat->fmtChunk.bytesPerSec, 4, 1, fp);
	fread(&waveFormat->fmtChunk.blockSize, 2, 1, fp);
	fread(&waveFormat->fmtChunk.bitsPerSample, 2, 1, fp);
}


// read information of data chunk
void wave_readRiffChunk(FILE *fp, WAVE_FORMAT *waveFormat, char *fileName) {
	// read data chunk
	fseek(fp, 12, SEEK_SET);
	wave_setPointer(fp, "data");
	strcpy(waveFormat->dataChunk.chunkID, "data");
	fread(&waveFormat->dataChunk.chunkSize, 4, 1, fp);
}


// read information of RIFF, FMT, DATA chunks
void wave_readFormat(FILE *fp, WAVE_FORMAT *waveFormat, char *fileName) {
	// read RIFF chunk
	wave_setPointer(fp, "RIFF");
	strcpy(waveFormat->riffChunk.chunkID, "RIFF");
	fread(&waveFormat->riffChunk.chunkSize, 4, 1, fp);
	fread(waveFormat->riffChunk.chunkFormType, 1, 4, fp);

	// read fmt chunk
	fseek(fp, 12, SEEK_SET);
	wave_setPointer(fp, "fmt ");
	strcpy(waveFormat->fmtChunk.chunkID, "fmt ");
	fread(&waveFormat->fmtChunk.chunkSize, 4, 1, fp);
	fread(&waveFormat->fmtChunk.waveFormatType, 2, 1, fp);
	fread(&waveFormat->fmtChunk.formatChannel, 2, 1, fp);
	fread(&waveFormat->fmtChunk.samplesPerSec, 4, 1, fp);
	fread(&waveFormat->fmtChunk.bytesPerSec, 4, 1, fp);
	fread(&waveFormat->fmtChunk.blockSize, 2, 1, fp);
	fread(&waveFormat->fmtChunk.bitsPerSample, 2, 1, fp);
	
	// read data chunk
	fseek(fp, 12, SEEK_SET);
	wave_setPointer(fp, "data");
	strcpy(waveFormat->dataChunk.chunkID, "data");
	fread(&waveFormat->dataChunk.chunkSize, 4, 1, fp);
}


/*	fileName : 読み込むファイル名	*/
void waveDataRead(int length, float *s, char *fileName) {
	FILE *fp;
	int chunkSize;
	char chunkID[5] = {};

	fp = fopen(fileName, "rb");

	if(!fp) {
		printf("file open error\n");
		exit(1);
	}

	//dataチャンクから読み込み
	while(strcmp(chunkID, "data")) {
		if(!strcmp(chunkID, "LIST")) {
			fseek(fp, chunkSize, SEEK_CUR);
		} else if (!strcmp(chunkID, "")) {
			break;
		}
		fread(chunkID, 1, 4, fp);
		fread(&chunkSize, 4, 1, fp);
	}

	//dataを縮小し格納
	int i;
	short data;
	for(i = 0; i < length; i++) {
	fread(&data, 2, 1, fp);
	s[i] = (float)data/GROUND;
	}

	fclose(fp);
}

/*	fileName : 書き込み先のファイル	 */
void waveWrite(WAVE_FORMAT *waveFormat, MONO_PCM *pcm, char *fileName) {
	FILE *fp;

	fp = fopen(fileName, "wb");

	if(!fp) {
		printf("file open error\n");
		exit(1);
	}

	// RIFFチャンクの書き込み
	fwrite(waveFormat->riffChunk.chunkID, 1, 4, fp);
	fwrite(&waveFormat->riffChunk.chunkSize, 4, 1, fp);
	fwrite(waveFormat->riffChunk.chunkFormType, 1, 4, fp);

	// fmtチャンクの書き込み
	waveFormat->fmtChunk.chunkSize = 16;
	fwrite(waveFormat->fmtChunk.chunkID, 1, 4, fp);
	fwrite(&waveFormat->fmtChunk.chunkSize, 4, 1, fp);
	fwrite(&waveFormat->fmtChunk.waveFormatType, 2, 1, fp);
	fwrite(&waveFormat->fmtChunk.formatChannel, 2, 1, fp);
	fwrite(&waveFormat->fmtChunk.samplesPerSec, 4, 1, fp);
	fwrite(&waveFormat->fmtChunk.bytesPerSec, 4, 1, fp);
	fwrite(&waveFormat->fmtChunk.blockSize, 2, 1, fp);
	fwrite(&waveFormat->fmtChunk.bitsPerSample, 2, 1, fp);

	//dataチャンクの書き込み
	fwrite(waveFormat->dataChunk.chunkID, 1, 4, fp);
	fwrite(&waveFormat->dataChunk.chunkSize, 4, 1, fp);

	short data;
	short bytesPerSample = pcm->bits / 8;
	float s;
	int i;
	for(i = 0; i < pcm->length / bytesPerSample; i++) {
		s = ((pcm->s[i] + 1.0) / 2) * (MAX - 1);
		if(s > MAX - 1)
			s = MAX - 1;
		else if(s < MIN)
			s = MIN;
		data = (short)(s + 0.5) - GROUND;

		//printf("%d\n", data);
		fwrite(&data, bytesPerSample, 1, fp);
	}

	fclose(fp);
}


//	print header information
void printWaveFormatInfo(WAVE_FORMAT *waveFormat) {
	printf("/*   riffChunk   */");
	printf("\nriffChunk.chunkID : %s", waveFormat->riffChunk.chunkID);
	printf("\nchunkSize\n : %ld", waveFormat->riffChunk.chunkSize);
	printf("\nchunkFormType : %s", waveFormat->riffChunk.chunkFormType);

	printf("\n\n/*  fmtChunk	 */");
	printf("\nchunkID : %s", waveFormat->fmtChunk.chunkID);
	printf("\nchunkSize : %ld", waveFormat->fmtChunk.chunkSize);
	printf("\nwaveFormatType : %d", waveFormat->fmtChunk.waveFormatType);
	printf("\nformatChannel : %d", waveFormat->fmtChunk.formatChannel);
	printf("\nsamplesPerSec : %ld", waveFormat->fmtChunk.samplesPerSec);
	printf("\nbytesPerSec : %ld", waveFormat->fmtChunk.bytesPerSec);
	printf("\nblockSize : %d", waveFormat->fmtChunk.blockSize);
	printf("\nbitsPerSample : %d", waveFormat->fmtChunk.bitsPerSample);

	printf("\n\n/*   dataChunk   */");
	printf("\nchunkID : %s", waveFormat->dataChunk.chunkID);
	printf("\nchunkSize : %ld\n", waveFormat->dataChunk.chunkSize);
}
